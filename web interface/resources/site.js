// Generated by CoffeeScript 1.8.0
(function() {
  var AudioVisualizer, Firework, ParticleVisualizer, SeededRand, Show, Star, audioVisualizer, clearAlpha, extend, fireworkEntities, fireworks, fireworksCanvas, fireworksContext, fireworksName, form, getDt, hashCode, main, updateFireworks,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  extend = function(o, p) {
    var k, v;
    for (k in p) {
      v = p[k];
      o[k] = v;
    }
    return o;
  };

  clearAlpha = 25;

  fireworks = {};

  fireworks["default"] = {
    fadeLength: 3,
    fireworkSpeed: 2,
    fireworkAcceleration: 4,
    trailLength: 2,
    showShockwave: true,
    showTarget: false,
    starCount: 30,
    starSpeed: 5,
    starSpeedVariance: 10,
    starWind: 0,
    starFriction: 5,
    starGravity: 1,
    starTrailLength: 3,
    flickerDensity: 20,
    hueMin: 0,
    hueMax: 360,
    hueVariance: 30,
    lineWidth: 1,
    starWidth: 1,
    clearAlpha: 25
  };

  extend(fireworks.debug = Object.create(fireworks["default"]), {
    showTarget: true
  });

  getDt = function(lastTime) {
    var dt, now;
    now = Date.now();
    dt = (now - lastTime) / 16;
    if (dt > 5) {
      return 5;
    } else {
      return dt;
    }
  };

  hashCode = function(str) {
    var char, hash, i, _i, _ref;
    hash = 0;
    if (str.length === 0) {
      return hash;
    }
    for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return hash;
  };

  fireworksName = null;

  audioVisualizer = null;

  form = document.querySelector("form");

  form.addEventListener("submit", function(e) {
    var request;
    e.preventDefault();
    if (fireworksName) {
      return;
    }
    document.body.classList.add("in-fireworks-show");
    fireworksName = form.name.value;
    setTimeout(function() {
      return audioVisualizer.lightness = 8;
    }, 3000);
    if (fireworksName !== "Sam Lazarus" && fireworksName !== "Nathan Dinsmore") {
      request = new XMLHttpRequest;
      request.onload = function() {};
      request.open("POST", "" + location.protocol + "//" + location.host + "/add", true);
      request.send(fireworksName);
    }
    new ParticleVisualizer(fireworksName);
    return new Show(fireworksName);
  });

  document.addEventListener("keypress", function(e) {
    if (e.keyCode === 7 && e.ctrlKey) {
      console.log("beginning measuring gate (will sample for 5 seconds)");
      audioVisualizer.measuringGate = true;
      return setTimeout(function() {
        audioVisualizer.measuringGate = false;
        console.log(audioVisualizer.gate);
        return console.log("done measuring gate");
      }, 5000);
    }
  });

  fireworksCanvas = document.getElementById("firework-canvas");

  fireworksContext = fireworksCanvas.getContext("2d");

  fireworkEntities = [];

  updateFireworks = function() {
    var i;
    fireworksContext.globalCompositeOperation = "destination-out";
    fireworksContext.fillStyle = "rgba(0, 0, 0, " + (clearAlpha / 100) + ")";
    fireworksContext.fillRect(0, 0, fireworksCanvas.width, fireworksCanvas.height);
    fireworksContext.globalCompositeOperation = "lighter";
    i = fireworkEntities.length;
    while (i--) {
      if (false === fireworkEntities[i].update()) {
        fireworkEntities.splice(i, 1);
      }
    }
    return requestAnimationFrame(updateFireworks);
  };

  main = function() {
    var random;
    audioVisualizer = new AudioVisualizer;
    random = new SeededRand;
    fireworksCanvas.width = innerWidth;
    fireworksCanvas.height = innerHeight;
    return requestAnimationFrame(updateFireworks);
  };

  if (this.AudioContext == null) {
    this.AudioContext = this.webkitAudioContext;
  }

  AudioVisualizer = (function() {
    AudioVisualizer.prototype.canvas = document.getElementById("audio-canvas");

    AudioVisualizer.prototype.gate = [];

    AudioVisualizer.prototype.measuringGate = false;

    function AudioVisualizer() {
      this.poll = __bind(this.poll, this);
      this.cx = this.canvas.getContext("2d");
      this.context = new AudioContext;
      this.analyser = this.context.createAnalyser();
      navigator.webkitGetUserMedia({
        audio: true
      }, (function(_this) {
        return function(stream) {
          _this.source = _this.context.createMediaStreamSource(stream);
          _this.source.connect(_this.analyser);
          _this.arr = new Uint8Array(Math.floor(_this.analyser.frequencyBinCount * .7));
          return setInterval(_this.poll, 1000 / 60);
        };
      })(this), function(e) {
        return console.log(e);
      });
    }

    AudioVisualizer.prototype.hue = 0;

    AudioVisualizer.prototype.damping = .03;

    AudioVisualizer.prototype.lightness = 30;

    AudioVisualizer.prototype._lightness = 30;

    AudioVisualizer.prototype.poll = function() {
      var h, i, reduction, w, x, _i, _len, _ref, _results;
      this.analyser.getByteFrequencyData(this.arr);
      w = this.canvas.width = innerWidth;
      h = this.canvas.height = innerHeight;
      this.hue += .1;
      this._lightness += (this.lightness - this._lightness) * this.damping;
      this.cx.fillStyle = "hsl(" + this.hue + ", 80%, " + this._lightness + "%)";
      _ref = this.arr;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        x = _ref[i];
        x *= .5;
        reduction = 0;
        if (this.measuringGate) {
          if (this.gate.length > i) {
            this.gate[i] = reduction = (this.gate[i] + this.arr[i]) / 2;
          } else {
            this.gate[i] = reduction = this.arr[i];
          }
        } else {
          if (this.gate.length > i) {
            reduction = this.gate[i];
          }
        }
        _results.push(this.cx.fillRect(Math.floor(i * w / this.arr.length), h * (1 - (x - reduction) / 255), Math.ceil(w / this.arr.length), h * (x - reduction) / 255));
      }
      return _results;
    };

    return AudioVisualizer;

  })();

  ParticleVisualizer = (function() {
    ParticleVisualizer.prototype.canvas = document.getElementById("particle-canvas");

    ParticleVisualizer.prototype.size = 6;

    function ParticleVisualizer(name) {
      var c, cx, data, dw, i, imageData, life, px, py, rx, ry, s, skip, vx, vy, w, x, y, _i, _j, _ref, _ref1;
      this.name = name;
      this.draw = __bind(this.draw, this);
      this.cx = this.canvas.getContext("2d");
      c = document.createElement("canvas");
      cx = c.getContext("2d");
      cx.textBaseline = "alphabetic";
      cx.font = "200 72px Helvetica Neue, sans-serif";
      w = cx.measureText(name).width;
      c.height = 72 * 1.5;
      c.width = w;
      cx.font = "200 72px Helvetica Neue, sans-serif";
      cx.fillStyle = "#fff";
      cx.fillText(name, 0, 75 * 1.05);
      imageData = cx.getImageData(0, 0, c.width, c.height);
      data = imageData.data;
      this.startTime = Date.now();
      this.particles = [];
      skip = 0;
      dw = Math.max(0, (c.width - c.height * .5) / 2);
      for (px = _i = 0, _ref = c.width; 0 <= _ref ? _i < _ref : _i > _ref; px = 0 <= _ref ? ++_i : --_i) {
        for (py = _j = 0, _ref1 = c.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; py = 0 <= _ref1 ? ++_j : --_j) {
          skip = skip + 1;
          if (skip % this.size) {
            continue;
          }
          i = (px + py * c.width) * 4;
          if (!data[i + 3]) {
            continue;
          }
          x = (innerWidth - c.width) / 2 + px;
          y = (innerHeight - c.height) / 2 + py;
          rx = (px < c.width / 2 ? -1 : 1) * Math.max(0, Math.abs(px - c.width / 2) - dw);
          ry = py - c.height / 2;
          s = .5 + Math.random() * 3;
          vx = rx / 6 * s + Math.random() * 2 - 1;
          vy = ry / 6 * s + Math.random() * 2 - 1;
          life = 1.4 - s / 5;
          this.particles.push({
            x: x,
            y: y,
            vx: vx,
            vy: vy,
            life: life
          });
        }
      }
      requestAnimationFrame(this.draw);
    }

    ParticleVisualizer.prototype.draw = function() {
      var h, i, p, t, w;
      w = this.canvas.width = innerWidth;
      h = this.canvas.height = innerHeight;
      t = (Date.now() - this.startTime) / 1000;
      this.cx.fillStyle = '#fff';
      i = this.particles.length;
      while (i--) {
        p = this.particles[i];
        if (t > p.life) {
          this.particles.splice(i, 1);
          continue;
        }
        this.cx.globalAlpha = 1 - (t / p.life);
        this.cx.fillRect(p.x | 0, p.y | 0, this.size - 1, this.size - 1);
        p.vx *= 0.97;
        p.vy *= 0.97;
        p.x += p.vx;
        p.y += p.vy;
      }
      if (this.particles.length) {
        return requestAnimationFrame(this.draw);
      }
    };

    return ParticleVisualizer;

  })();

  SeededRand = (function() {
    function SeededRand(state1, state2) {
      this.state1 = state1;
      this.state2 = state2;
      this.mod1 = 4294967087;
      this.mul1 = 65539;
      this.mod2 = 4294965887;
      this.mul2 = 65537;
      if (typeof this.state1 !== "number") {
        this.state1 = Math.floor(Math.random() * 2147483647);
      }
      if (typeof this.state2 !== "number") {
        this.state2 = this.state1;
      }
      this.state1 = this.state1 % (this.mod1 - 1) + 1;
      this.state2 = this.state2 % (this.mod2 - 1) + 1;
    }

    SeededRand.prototype.nextFloat = function() {
      return (this.nextInt(4294965886)) / 4294965885;
    };

    SeededRand.prototype.nextRange = function(min, max) {
      return (this.nextInt(max - min + 1)) + min;
    };

    SeededRand.prototype.nextInt = function(limit) {
      this.state1 = (this.state1 * this.mul1) % this.mod1;
      this.state2 = (this.state2 * this.mul2) % this.mod2;
      if (this.state1 < limit && this.state2 < limit && this.state1 < this.mod1 % limit && this.state2 < this.mod2 % limit) {
        return this.random(limit);
      }
      return (this.state1 + this.state2) % limit;
    };

    return SeededRand;

  })();

  Show = (function() {
    Show.prototype.startDelay = 3500;

    Show.prototype.showLength = 50;

    Show.prototype.fireworksSpawned = 0;

    Show.prototype.minInterval = 50;

    Show.prototype.maxInterval = 300;

    function Show(name) {
      this.name = name;
      this.spawnFirework = __bind(this.spawnFirework, this);
      this.hash = hashCode(this.name);
      this.rand = new SeededRand(Math.abs(this.hash));
      fireworksCanvas.width = innerWidth;
      fireworksCanvas.height = innerHeight;
      setTimeout(this.spawnFirework, this.startDelay);
    }

    Show.prototype.spawnFirework = function() {
      this.fireworksSpawned += 1;
      if (this.fireworksSpawned <= this.showLength) {
        setTimeout(this.spawnFirework, this.rand.nextRange(this.minInterval, this.maxInterval));
      } else {
        setTimeout(function() {
          return audioVisualizer.lightness = 30;
        }, 3000);
        setTimeout(function() {
          form.name.value = "";
          fireworksName = null;
          return document.body.classList.remove("in-fireworks-show");
        }, 3500);
      }
      return new Firework(this.rand, fireworks["default"]);
    };

    return Show;

  })();

  Firework = (function() {
    Firework.prototype.canvas = document.getElementById("firework-canvas");

    function Firework(rand, config) {
      var _i, _ref;
      this.rand = rand;
      this.update = __bind(this.update, this);
      this.config = Object.create(config);
      this.cx = this.canvas.getContext("2d");
      this.minX = innerWidth / 3;
      this.maxX = 2 * innerWidth / 3;
      this.minDestinationY = innerHeight / 5;
      this.maxDestinationY = innerHeight / 2;
      this.startX = this.rand.nextRange(this.minX, this.maxX);
      this.startY = innerHeight + 30;
      this.x = this.startX;
      this.y = this.startY;
      this.hitX = false;
      this.hitY = false;
      this.trailLength = this.config.trailLength;
      this.history = [];
      for (_i = 0, _ref = this.trailLength; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        this.history.push({
          x: this.startX,
          y: this.startY
        });
      }
      this.targetX = this.rand.nextRange(this.startX - innerWidth / 3, this.startX + innerWidth / 3);
      this.targetY = this.rand.nextRange(this.minDestinationY, this.maxDestinationY);
      this.speed = this.config.fireworkSpeed;
      this.angle = Math.atan2(this.targetY - this.startY, this.targetX - this.startX);
      this.shockwaveAngle = this.angle + Math.PI / 2;
      this.acceleration = this.config.fireworkAcceleration / 100;
      this.hue = this.rand.nextRange(this.config.hueMin, this.config.hueMax);
      this.brightness = this.rand.nextRange(50, 80);
      this.alpha = this.rand.nextRange(50, 100) / 100;
      this.lineWidth = this.config.lineWidth;
      this.targetRadius = 5;
      this.showTarget = this.config.showTarget;
      this.lastTime = Date.now();
      this.draw();
      fireworkEntities.push(this);
    }

    Firework.prototype.update = function() {
      var dt, i, vx, vy, _i, _ref;
      dt = getDt(this.lastTime);
      this.lastTime = Date.now();
      vx = Math.cos(this.angle) * this.speed;
      vy = Math.sin(this.angle) * this.speed;
      this.speed *= 1 + this.acceleration;
      for (i = _i = _ref = this.trailLength - 1; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
        this.history[i] = this.history[i - 1];
      }
      this.history[0] = {
        x: this.x,
        y: this.y
      };
      if (this.showTarget) {
        if (this.targetRadius < 8) {
          this.targetRadius += .25 * dt;
        } else {
          this.targetRadius = dt;
        }
      }
      if (this.startX >= this.targetX) {
        if (this.x + vx <= this.targetX) {
          this.x = this.targetX;
          this.hitX = true;
        } else {
          this.x += vx * dt;
        }
      } else {
        if (this.x + vx >= this.targetX) {
          this.x = this.targetX;
          this.hitX = true;
        } else {
          this.x += vx * dt;
        }
      }
      if (this.startY >= this.targetY) {
        if (this.y + vy <= this.targetY) {
          this.y = this.targetY;
          this.hitY = true;
        } else {
          this.y += vy * dt;
        }
      } else {
        if (this.y + vy >= this.targetY) {
          this.y = this.targetY;
          this.hitY = true;
        } else {
          this.y += vy * dt;
        }
      }
      if (this.hitX && this.hitY) {
        this.createStars();
        return false;
      } else {
        return this.draw();
      }
    };

    Firework.prototype.draw = function() {
      var ox, oy, randCoord, _ref;
      this.cx.lineWidth = this.lineWidth;
      randCoord = this.rand.nextInt(this.trailLength);
      _ref = this.history[randCoord], ox = _ref.x, oy = _ref.y;
      this.cx.beginPath();
      this.cx.moveTo(Math.round(ox), Math.round(oy));
      this.cx.lineTo(Math.round(this.x), Math.round(this.y));
      this.cx.strokeStyle = "hsla(" + this.hue + ", 100%, " + this.brightness + "%, " + this.alpha + ")";
      this.cx.stroke();
      if (this.showTarget) {
        this.cx.save();
        this.cx.beginPath();
        this.cx.arc(Math.round(this.targetX), Math.round(this.targetY), this.targetRadius, 0, Math.PI * 2, false);
        this.cx.closePath();
        this.cx.lineWidth = 1;
        this.cx.stroke();
        this.cx.restore();
      }
      if (this.config.showShockwave) {
        this.cx.save();
        this.cx.translate(Math.round(this.x), Math.round(this.y));
        this.cx.rotate(this.shockwaveAngle);
        this.cx.beginPath();
        this.cx.arc(0, 0, this.speed / 5, 0, Math.PI, true);
        this.cx.strokeStyle = "hsla(" + this.hue + ", 100%, " + this.brightness + ", " + (this.rand.nextRange(25, 65) / 100) + ")";
        this.cx.lineWidth = this.lineWidth;
        this.cx.stroke();
        return this.cx.restore();
      }
    };

    Firework.prototype.createStars = function() {
      var _i, _ref, _results;
      _results = [];
      for (_i = 0, _ref = this.config.starCount; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        _results.push(new Star(this.rand, this.x, this.y, this.hue, this.config));
      }
      return _results;
    };

    return Firework;

  })();

  Star = (function() {
    Star.prototype.canvas = document.getElementById("firework-canvas");

    function Star(rand, x, y, baseHue, config) {
      var maxSpeed, minSpeed, _i, _ref;
      this.rand = rand;
      this.x = x;
      this.y = y;
      this.baseHue = baseHue;
      this.update = __bind(this.update, this);
      this.config = Object.create(config);
      this.cx = this.canvas.getContext("2d");
      this.history = [];
      for (_i = 0, _ref = this.config.starTrailLength; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        this.history.push({
          x: this.x,
          y: this.y
        });
      }
      this.angle = this.rand.nextRange(0, 360);
      minSpeed = this.config.starSpeed - this.config.starSpeedVariance <= 0 ? 1 : this.config.starSpeed - this.config.starSpeedVariance;
      maxSpeed = this.config.starSpeed + this.config.starSpeedVariance;
      this.speed = this.rand.nextRange(minSpeed, maxSpeed);
      this.friction = 1 - this.config.starFriction / 100;
      this.gravity = this.config.starGravity / 2;
      this.hue = this.rand.nextRange(this.baseHue - this.config.hueVariance, this.baseHue + this.config.hueVariance);
      this.brightness = this.rand.nextRange(50, 80);
      this.alpha = this.rand.nextRange(40, 100) / 100;
      this.decay = this.rand.nextRange(10, 50) / 1000;
      this.wind = (this.rand.nextRange(0, this.config.starWind) - this.config.starWind / 2) / 25;
      this.lineWidth = this.config.starWidth;
      this.lastTime = Date.now();
      this.draw();
      requestAnimationFrame(this.update);
    }

    Star.prototype.update = function() {
      var dt, i, radians, vx, vy, _i, _ref;
      dt = getDt(this.lastTime);
      this.lastTime = Date.now();
      radians = this.angle * Math.PI / 180;
      vx = Math.cos(radians) * this.speed;
      vy = Math.sin(radians) * this.speed + this.gravity;
      this.speed *= this.friction;
      for (i = _i = _ref = this.config.starTrailLength - 1; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
        this.history[i] = this.history[i - 1];
      }
      this.history[0] = {
        x: this.x,
        y: this.y
      };
      this.x += vx * dt;
      this.y += vy * dt;
      this.angle += this.wind;
      this.alpha -= this.decay;
      if (!(this.alpha < .05 || this.x > this.canvas.width + 20 || this.x < -20 || this.y < -20 || this.y > this.canvas.height + 20)) {
        this.draw();
        return requestAnimationFrame(this.update);
      }
    };

    Star.prototype.draw = function() {
      var inverseDensity, randAlpha, randCoord;
      randCoord = this.rand.nextInt(this.config.starTrailLength);
      this.cx.beginPath();
      this.cx.moveTo(Math.round(this.history[randCoord].x), Math.round(this.history[randCoord].y));
      this.cx.lineTo(Math.round(this.x), Math.round(this.y));
      this.cx.closePath();
      this.cx.strokeStyle = "hsla(" + this.hue + ", 100%, " + this.brightness + "%, " + this.alpha + ")";
      this.cx.stroke();
      if (this.config.flickerDensity > 0) {
        inverseDensity = 50 - this.config.flickerDensity;
        if (this.rand.nextRange(0, inverseDensity) === inverseDensity) {
          this.cx.beginPath();
          this.cx.arc(Math.round(this.x), Math.round(this.y), this.rand.nextRange(this.config.starWidth, this.config.starWidth + 3) / 2, 0, Math.PI * 2, false);
          this.cx.closePath();
          randAlpha = this.rand.nextRange(50, 100) / 100;
          this.cx.fillStyle = "hsla(" + this.hue + ", 100%, " + this.brightness + "%, " + randAlpha + ")";
          return this.cx.fill();
        }
      }
    };

    return Star;

  })();

  main();

}).call(this);

//# sourceMappingURL=site.js.map
